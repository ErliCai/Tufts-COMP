{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 1\n",
    "\n",
    "# 1) the Erdos-Renyi model takes 2 parameters, \n",
    "# the number of nodes n and a probability p which is the probability for an edge to be included in the graph\n",
    "\n",
    "# 2) the Watts and Strogatz model takes 3 parameters,\n",
    "# the number of nodes n,\n",
    "# Number of nearest neighbors, k, a node is connected to (this parameter needs to be an integer)\n",
    "# and a probability p for rewiring edges\n",
    "\n",
    "# 3) the configuration model takes a degree sequence\n",
    "\n",
    "# 4) the Barabasi-Albert preferential attachment model takes a number c represent \n",
    "# the number of edges added when a new node is added"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 2\n",
    "\n",
    "# For the Erdos-Renyi model\n",
    "# set the number of nodes equal to the number of nodes of karate graph\n",
    "# and the porbability of an edge to be included equals to the number of edges\n",
    "# divided by the number of edges of a complete graph with same number of nodes\n",
    "\n",
    "\n",
    "# For the Watts and Strogatz model\n",
    "# set the number of nodes equal to the number of nodes of karate graph,\n",
    "# k is set to be the closest integer to the average degree of original graph\n",
    "# and probability of rewiring is set to 0.1\n",
    "\n",
    "# For configuration model\n",
    "# set the degree sequence equals to the degree of nodes from orignal graph\n",
    "\n",
    "# For preferential attachment model\n",
    "# set the number of nodes equals to the number of nodes of karate graph,\n",
    "# set the\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 3 starts here\n",
    "\n",
    "import statistics \n",
    "\n",
    "def mean_and_std(l):\n",
    "    return statistics.mean(l), statistics.pstdev(l)\n",
    "\n",
    "def get_results(graphs, name):\n",
    "    \n",
    "    \n",
    "    # average betweenness centrality\n",
    "    betweenness_centrality = [nx.betweenness_centrality(graph) for graph in graphs]\n",
    "    average_bc = [sum(i.values())/len(i) for i in betweenness_centrality]\n",
    "    average_bc = mean_and_std(average_bc)\n",
    "    # mean shortest path length of largest connect component\n",
    "    mean_shortest_path_length = [nx.average_shortest_path_length(max(nx.connected_component_subgraphs(graph),key=len)) for graph in graphs]\n",
    "    mean_shortest_path_length = mean_and_std(mean_shortest_path_length)\n",
    "    # Average degree of karate graph\n",
    "    average_degree = [len(graph.edges)/len(graph.nodes) for graph in graphs]\n",
    "    average_degree = mean_and_std(average_degree)\n",
    "    # percentage of nodes with degree less than 3\n",
    "    percentage = []\n",
    "    for graph in graphs:\n",
    "        n = 0\n",
    "        for i in graph.nodes:\n",
    "            if graph.degree(i) >= 3:\n",
    "                n += 1\n",
    "        percentage.append(n / len(graph.nodes))\n",
    "    percentage = mean_and_std(percentage)\n",
    "    # diameter of largest connected component\n",
    "    diameter = [nx.diameter(max(nx.connected_component_subgraphs(graph),key=len)) for graph in graphs]\n",
    "    diameter = mean_and_std(diameter)\n",
    "    # clustering coefficient\n",
    "    clustring_coefficient = [nx.transitivity(graph) for graph in graphs]\n",
    "    clustring_coefficient = mean_and_std(clustring_coefficient)\n",
    "    # avergage local clustering coefficient\n",
    "    ace = [nx.average_clustering(graph) for graph in graphs]\n",
    "    ace = mean_and_std(ace)\n",
    "    # number of connected components\n",
    "    connected_components = [nx.number_connected_components(graph) for graph in graphs]\n",
    "    connected_components = mean_and_std(connected_components)\n",
    "    \n",
    "    if len(graphs) == 1:\n",
    "        print(\"For the \", name, \" we have\\n\",\n",
    "             \"average betweenness centrality: %.5f\" %average_bc[0],\"\\n\",\n",
    "             \"mean shortest path length: %.5f\" %mean_shortest_path_length[0], \"\\n\",\n",
    "             \"average degree: %.5f\" %average_degree[0], \"\\n\",\n",
    "             \"percentage of nodes with degree less than 3: %.5f\" %percentage[0], \"\\n\",\n",
    "             \"diameter: %.5f\" %diameter[0], \"\\n\",\n",
    "             \"clustering coefficient: %.5f\" %clustring_coefficient[0], \"\\n\",\n",
    "             \"average local clustering coefficient: %.5f\"%ace[0], \"\\n\",\n",
    "             \"number of connected components: %.5f\" %connected_components[0])\n",
    "    else:\n",
    "        print(\"For the \", name, \" we have\\n\",\n",
    "             \"average betweenness centrality: average = %.5f\" %average_bc[0], \"   standard deviation = %.5f\" %average_bc[1],\"\\n\",\n",
    "             \"mean shortest path length: average = %.5f\" %mean_shortest_path_length[0], \"   standard deviation = %.5f\" %mean_shortest_path_length[1],\"\\n\",\n",
    "             \"average degree: average = %.5f\" %average_degree[0], \"   standard deviation = %.5f\" %average_degree[1],\"\\n\",\n",
    "             \"percentage of nodes with degree less than 3: average = %.5f\"  %percentage[0], \"   standard deviation = %.5f\" %percentage[1], \"\\n\",\n",
    "             \"diameter: average = %.5f\" %diameter[0], \"   standard deviation = %.5f\" %diameter[1], \"\\n\", \n",
    "             \"clustering coefficient: average = %.5f\" %clustring_coefficient[0], \"   standard deviation = %.5f\"%clustring_coefficient[1], \"\\n\",\n",
    "             \"average local clustering coefficient: average = %.5f\"%ace[0], \"   standard deviation = %.5f\"%ace[1], \"\\n\",\n",
    "             \"number of connected components: average = %.5f\"%connected_components[0], \"   standard deviation = %.5f\"%connected_components[1])        \n",
    "    print(\"\\n\",\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compare_models(graph, name):\n",
    "    \n",
    "    get_results([graph], name + \" graph\")\n",
    "    \n",
    "    # Erdos-Renyi model\n",
    "\n",
    "    n = len(graph.nodes)\n",
    "    p = 2 * len(graph.edges)/(n*(n-1))\n",
    "\n",
    "    erdos_renyi = []\n",
    "    for i in range(10):\n",
    "        erdos_renyi.append(nx.erdos_renyi_graph(n,p))\n",
    "\n",
    "    get_results(erdos_renyi, name + \"_erdos_renyi graph\")\n",
    "\n",
    "\n",
    "    # the Watts and Strogatz model\n",
    "    small_world = []\n",
    "    n = len(graph.nodes)\n",
    "    k = round(len(graph.edges)/len(graph.nodes))\n",
    "    p = 0.1\n",
    "    for i in range(10):\n",
    "        small_world.append(nx.watts_strogatz_graph(n,k,p))\n",
    "    get_results(small_world, name + \"_small_world graph\")\n",
    "\n",
    "    # the configuration model \n",
    "    degree = [i[1] for i in graph.degree]\n",
    "    configuration_model = []\n",
    "    for i in range(10):\n",
    "        configuration_model.append(nx.Graph(nx.configuration_model(degree)))\n",
    "    get_results(configuration_model, name + \"_configuration_model graph\") \n",
    "\n",
    "    # the preferential attachment model\n",
    "    average_degree = len(graph.edges)/len(graph.nodes)\n",
    "    preferential_attachment = []\n",
    "    for i in range(10):\n",
    "        preferential_attachment.append(nx.barabasi_albert_graph(len(graph.nodes),round(average_degree)))\n",
    "    get_results(preferential_attachment, name + \"_preferential_attachment graph\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For the  karate graph  we have\n",
      " average betweenness centrality: 0.04401 \n",
      " mean shortest path length: 2.40820 \n",
      " average degree: 2.29412 \n",
      " percentage of nodes with degree less than 3: 0.64706 \n",
      " diameter: 5.00000 \n",
      " clustering coefficient: 0.25568 \n",
      " average local clustering coefficient: 0.57064 \n",
      " number of connected components: 1.00000\n",
      "\n",
      " \n",
      "\n",
      "For the  karate_erdos_renyi graph  we have\n",
      " average betweenness centrality: average = 0.04104    standard deviation = 0.00344 \n",
      " mean shortest path length: average = 2.34360    standard deviation = 0.08437 \n",
      " average degree: average = 2.32647    standard deviation = 0.16134 \n",
      " percentage of nodes with degree less than 3: average = 0.85588    standard deviation = 0.05000 \n",
      " diameter: average = 4.60000    standard deviation = 0.48990 \n",
      " clustering coefficient: average = 0.13536    standard deviation = 0.02606 \n",
      " average local clustering coefficient: average = 0.13697    standard deviation = 0.04009 \n",
      " number of connected components: average = 1.40000    standard deviation = 0.66332\n",
      "\n",
      " \n",
      "\n",
      "For the  karate_small_world graph  we have\n",
      " average betweenness centrality: average = 0.21692    standard deviation = 0.05724 \n",
      " mean shortest path length: average = 8.46859    standard deviation = 1.09427 \n",
      " average degree: average = 1.00000    standard deviation = 0.00000 \n",
      " percentage of nodes with degree less than 3: average = 0.07647    standard deviation = 0.03529 \n",
      " diameter: average = 21.30000    standard deviation = 3.66197 \n",
      " clustering coefficient: average = 0.01579    standard deviation = 0.03158 \n",
      " average local clustering coefficient: average = 0.01324    standard deviation = 0.02649 \n",
      " number of connected components: average = 1.20000    standard deviation = 0.40000\n",
      "\n",
      " \n",
      "\n",
      "For the  karate_configuration_model graph  we have\n",
      " average betweenness centrality: average = 0.04796    standard deviation = 0.00300 \n",
      " mean shortest path length: average = 2.54333    standard deviation = 0.08672 \n",
      " average degree: average = 2.03235    standard deviation = 0.08049 \n",
      " percentage of nodes with degree less than 3: average = 0.62353    standard deviation = 0.02882 \n",
      " diameter: average = 5.00000    standard deviation = 0.63246 \n",
      " clustering coefficient: average = 0.16448    standard deviation = 0.02564 \n",
      " average local clustering coefficient: average = 0.19464    standard deviation = 0.04279 \n",
      " number of connected components: average = 1.10000    standard deviation = 0.30000\n",
      "\n",
      " \n",
      "\n",
      "For the  karate_preferential_attachment graph  we have\n",
      " average betweenness centrality: average = 0.04535    standard deviation = 0.00231 \n",
      " mean shortest path length: average = 2.45134    standard deviation = 0.07401 \n",
      " average degree: average = 1.88235    standard deviation = 0.00000 \n",
      " percentage of nodes with degree less than 3: average = 0.50000    standard deviation = 0.06308 \n",
      " diameter: average = 4.40000    standard deviation = 0.48990 \n",
      " clustering coefficient: average = 0.12860    standard deviation = 0.02435 \n",
      " average local clustering coefficient: average = 0.25287    standard deviation = 0.08137 \n",
      " number of connected components: average = 1.00000    standard deviation = 0.00000\n",
      "\n",
      " \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# karate club\n",
    "\n",
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "file = open(\"karate/zachary.dat\")\n",
    "f = file.readlines()\n",
    "\n",
    "karate = nx.Graph()\n",
    "karate.add_nodes_from(list(range(34)))\n",
    "\n",
    "for i in range(34):\n",
    "    line = f[i+7].split()\n",
    "    for j in range(34):\n",
    "        if line[j] == '1':\n",
    "            karate.add_edge(i,j)\n",
    "\n",
    "\n",
    "compare_models(karate, \"karate\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For the  dolphins graph  we have\n",
      " average betweenness centrality: 0.03928 \n",
      " mean shortest path length: 3.35695 \n",
      " average degree: 2.56452 \n",
      " percentage of nodes with degree less than 3: 0.75806 \n",
      " diameter: 8.00000 \n",
      " clustering coefficient: 0.30878 \n",
      " average local clustering coefficient: 0.25896 \n",
      " number of connected components: 1.00000\n",
      "\n",
      " \n",
      "\n",
      "For the  dolphins_erdos_renyi graph  we have\n",
      " average betweenness centrality: average = 0.02788    standard deviation = 0.00151 \n",
      " mean shortest path length: average = 2.71726    standard deviation = 0.09182 \n",
      " average degree: average = 2.42903    standard deviation = 0.15641 \n",
      " percentage of nodes with degree less than 3: average = 0.86613    standard deviation = 0.04449 \n",
      " diameter: average = 5.30000    standard deviation = 0.45826 \n",
      " clustering coefficient: average = 0.07653    standard deviation = 0.00778 \n",
      " average local clustering coefficient: average = 0.07342    standard deviation = 0.01793 \n",
      " number of connected components: average = 1.80000    standard deviation = 0.74833\n",
      "\n",
      " \n",
      "\n",
      "For the  dolphins_small_world graph  we have\n",
      " average betweenness centrality: average = 0.16201    standard deviation = 0.06110 \n",
      " mean shortest path length: average = 11.45456    standard deviation = 2.35974 \n",
      " average degree: average = 1.00000    standard deviation = 0.00000 \n",
      " percentage of nodes with degree less than 3: average = 0.08871    standard deviation = 0.02309 \n",
      " diameter: average = 30.90000    standard deviation = 7.63479 \n",
      " clustering coefficient: average = 0.00000    standard deviation = 0.00000 \n",
      " average local clustering coefficient: average = 0.00000    standard deviation = 0.00000 \n",
      " number of connected components: average = 1.30000    standard deviation = 0.64031\n",
      "\n",
      " \n",
      "\n",
      "For the  dolphins_configuration_model graph  we have\n",
      " average betweenness centrality: average = 0.02930    standard deviation = 0.00118 \n",
      " mean shortest path length: average = 2.76880    standard deviation = 0.05117 \n",
      " average degree: average = 2.44839    standard deviation = 0.04828 \n",
      " percentage of nodes with degree less than 3: average = 0.75484    standard deviation = 0.00645 \n",
      " diameter: average = 5.80000    standard deviation = 0.60000 \n",
      " clustering coefficient: average = 0.09562    standard deviation = 0.00941 \n",
      " average local clustering coefficient: average = 0.08379    standard deviation = 0.01587 \n",
      " number of connected components: average = 1.10000    standard deviation = 0.30000\n",
      "\n",
      " \n",
      "\n",
      "For the  dolphins_preferential_attachment graph  we have\n",
      " average betweenness centrality: average = 0.02296    standard deviation = 0.00051 \n",
      " mean shortest path length: average = 2.37763    standard deviation = 0.03072 \n",
      " average degree: average = 2.85484    standard deviation = 0.00000 \n",
      " percentage of nodes with degree less than 3: average = 0.99677    standard deviation = 0.00645 \n",
      " diameter: average = 4.00000    standard deviation = 0.00000 \n",
      " clustering coefficient: average = 0.13753    standard deviation = 0.01423 \n",
      " average local clustering coefficient: average = 0.20231    standard deviation = 0.03143 \n",
      " number of connected components: average = 1.00000    standard deviation = 0.00000\n",
      "\n",
      " \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# dolphins\n",
    "file = open(\"dolphins/dolphins.dat\")\n",
    "f = file.readlines()\n",
    "\n",
    "dolphins = nx.Graph()\n",
    "dolphins.add_nodes_from(list(range(34)))\n",
    "\n",
    "for i in range(62):\n",
    "    line = f[i+130].split()\n",
    "    for j in range(62):\n",
    "        if line[j] == '1':\n",
    "            dolphins.add_edge(i,j)\n",
    "\n",
    "compare_models(dolphins, \"dolphins\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For the  prison graph  we have\n",
      " average betweenness centrality: 0.03622 \n",
      " mean shortest path length: 3.35459 \n",
      " average degree: 2.11940 \n",
      " percentage of nodes with degree less than 3: 0.79104 \n",
      " diameter: 7.00000 \n",
      " clustering coefficient: 0.28808 \n",
      " average local clustering coefficient: 0.30991 \n",
      " number of connected components: 1.00000\n",
      "\n",
      " \n",
      "\n",
      "For the  prison_erdos_renyi graph  we have\n",
      " average betweenness centrality: average = 0.03119    standard deviation = 0.00141 \n",
      " mean shortest path length: average = 3.05905    standard deviation = 0.10861 \n",
      " average degree: average = 2.09104    standard deviation = 0.12170 \n",
      " percentage of nodes with degree less than 3: average = 0.79403    standard deviation = 0.04757 \n",
      " diameter: average = 6.20000    standard deviation = 0.74833 \n",
      " clustering coefficient: average = 0.06533    standard deviation = 0.00996 \n",
      " average local clustering coefficient: average = 0.06130    standard deviation = 0.01898 \n",
      " number of connected components: average = 1.50000    standard deviation = 0.50000\n",
      "\n",
      " \n",
      "\n",
      "For the  prison_small_world graph  we have\n",
      " average betweenness centrality: average = 0.14156    standard deviation = 0.06550 \n",
      " mean shortest path length: average = 12.39141    standard deviation = 3.14902 \n",
      " average degree: average = 1.00000    standard deviation = 0.00000 \n",
      " percentage of nodes with degree less than 3: average = 0.07164    standard deviation = 0.02736 \n",
      " diameter: average = 33.50000    standard deviation = 9.97246 \n",
      " clustering coefficient: average = 0.01673    standard deviation = 0.02753 \n",
      " average local clustering coefficient: average = 0.01393    standard deviation = 0.02310 \n",
      " number of connected components: average = 1.70000    standard deviation = 0.64031\n",
      "\n",
      " \n",
      "\n",
      "For the  prison_configuration_model graph  we have\n",
      " average betweenness centrality: average = 0.03239    standard deviation = 0.00057 \n",
      " mean shortest path length: average = 3.10507    standard deviation = 0.03710 \n",
      " average degree: average = 2.04179    standard deviation = 0.02736 \n",
      " percentage of nodes with degree less than 3: average = 0.78060    standard deviation = 0.01166 \n",
      " diameter: average = 6.40000    standard deviation = 0.48990 \n",
      " clustering coefficient: average = 0.04928    standard deviation = 0.01448 \n",
      " average local clustering coefficient: average = 0.04967    standard deviation = 0.01622 \n",
      " number of connected components: average = 1.00000    standard deviation = 0.00000\n",
      "\n",
      " \n",
      "\n",
      "For the  prison_preferential_attachment graph  we have\n",
      " average betweenness centrality: average = 0.02759    standard deviation = 0.00114 \n",
      " mean shortest path length: average = 2.79353    standard deviation = 0.07389 \n",
      " average degree: average = 1.94030    standard deviation = 0.00000 \n",
      " percentage of nodes with degree less than 3: average = 0.48806    standard deviation = 0.03952 \n",
      " diameter: average = 5.20000    standard deviation = 0.40000 \n",
      " clustering coefficient: average = 0.08002    standard deviation = 0.00924 \n",
      " average local clustering coefficient: average = 0.17044    standard deviation = 0.04742 \n",
      " number of connected components: average = 1.00000    standard deviation = 0.00000\n",
      "\n",
      " \n",
      "\n"
     ]
    }
   ],
   "source": [
    "file = open(\"prison/prison.dat\")\n",
    "f = file.readlines()\n",
    "\n",
    "prison = nx.Graph()\n",
    "prison.add_nodes_from(list(range(34)))\n",
    "\n",
    "for i in range(67):\n",
    "    line1 = f[2*i+4].split()\n",
    "    line2 = f[2*i+5].split()\n",
    "    line = line1 + line2\n",
    "    for j in range(67):\n",
    "        if line[j] == '1':\n",
    "            prison.add_edge(i,j)\n",
    "\n",
    "compare_models(prison, \"prison\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# question 4\n",
    "\n",
    "# preferential attachment has the highest clustering coefficient among models. \n",
    "# And it is alwawys guaranteed to has only one connected component\n",
    "# karate graph, dolphins graph and prisons graph are all most close to preferential attachment model.\n",
    "\n",
    "# I guess this is because these graphs are all some kinds of social networks \n",
    "# thus nodes created earlier will have more edges\n",
    "# So these graphs are all close to preferential attachment model.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
